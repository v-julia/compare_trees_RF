theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
fig_pair
res_ancom2_pair <- out_ancombc2$res_pair
df_fig_pair1 = res_ancom2_pair %>%
dplyr::filter(diff_groupNCPVT == 1 |
diff_groupCirNoPVT == 1 |
diff_groupCPVT == 1 |
diff_groupCirNoPVT_groupNCPVT == 1 |
diff_groupCPVT_groupNCPVT == 1 |
diff_groupCPVT_groupCirNoPVT == 1) %>%
dplyr::mutate(lfc1 = ifelse(diff_groupNCPVT == 1,
round(lfc_groupNCPVT, 2), 0),
lfc2 = ifelse(diff_groupCirNoPVT == 1,
round(lfc_groupCirNoPVT, 2), 0),
lfc3 = ifelse(diff_groupCPVT == 1,
round(lfc_groupCPVT, 2), 0),
lfc4 = ifelse(diff_groupCirNoPVT_groupNCPVT == 1,
round(lfc_groupCirNoPVT_groupNCPVT, 2), 0),
lfc5 = ifelse(diff_groupCPVT_groupNCPVT == 1,
round(lfc_groupCPVT_groupNCPVTt, 2), 0),
lfc6 = ifelse(diff_groupCPVT_groupCirNoPVT == 1,
round(lfc_groupCPVT_groupCirNoPVT, 2), 0)
) %>%
tidyr::pivot_longer(cols = lfc1:lfc6,
names_to = "group", values_to = "value") %>%
dplyr::arrange(taxon)
df_fig_pair1 = res_ancom2_pair %>%
dplyr::filter(diff_groupNCPVT == 1 |
diff_groupCirNoPVT == 1 |
diff_groupCPVT == 1 |
diff_groupCirNoPVT_groupNCPVT == 1 |
diff_groupCPVT_groupNCPVT == 1 |
diff_groupCPVT_groupCirNoPVT == 1) %>%
dplyr::mutate(lfc1 = ifelse(diff_groupNCPVT == 1,
round(lfc_groupNCPVT, 2), 0),
lfc2 = ifelse(diff_groupCirNoPVT == 1,
round(lfc_groupCirNoPVT, 2), 0),
lfc3 = ifelse(diff_groupCPVT == 1,
round(lfc_groupCPVT, 2), 0),
lfc4 = ifelse(diff_groupCirNoPVT_groupNCPVT == 1,
round(lfc_groupCirNoPVT_groupNCPVT, 2), 0),
lfc5 = ifelse(diff_groupCPVT_groupNCPVT == 1,
round(lfc_groupCPVT_groupNCPVT, 2), 0),
lfc6 = ifelse(diff_groupCPVT_groupCirNoPVT == 1,
round(lfc_groupCPVT_groupCirNoPVT, 2), 0)
) %>%
tidyr::pivot_longer(cols = lfc1:lfc6,
names_to = "group", values_to = "value") %>%
dplyr::arrange(taxon)
df_fig_pair2 = res_ancom2_pair %>%
dplyr::filter(diff_groupNCPVT == 1 |
diff_groupCirNoPVT == 1 |
diff_groupCPVT == 1 |
diff_groupCirNoPVT_groupNCPVT == 1 |
diff_groupCPVT_groupNCPVT == 1 |
diff_groupCPVT_groupCirNoPVT == 1) %>%
dplyr::mutate(lfc1 = ifelse(passed_ss_groupNCPVT == 1 & diff_groupNCPVT == 1,
"aquamarine3", "black"),
lfc2 = ifelse(passed_ss_groupCirNoPVT == 1 & diff_groupCirNoPVT == 1,
"aquamarine3", "black"),
lfc3 = ifelse(passed_ss_groupCPVT == 1 & diff_groupCPVT == 1,
"aquamarine3", "black"),
lfc4 = ifelse(passed_ss_groupCirNoPVT_groupNCPVT == 1 & diff_groupCirNoPVT_groupNCPVT == 1,
"aquamarine3", "black"),
lfc5 = ifelse(passed_ss_groupCPVT_groupNCPVT == 1 & diff_groupCPVT_groupNCPVT == 1,
"aquamarine3", "black"),
lfc6 = ifelse(passed_ss_groupCPVT_groupCirNoPVT == 1 & diff_groupCPVT_groupCirNoPVT == 1,
"aquamarine3", "black")) %>%
tidyr::pivot_longer(cols = lfc1:lfc6,
names_to = "group", values_to = "color") %>%
dplyr::arrange(taxon)
df_fig_pair = df_fig_pair1 %>%
dplyr::left_join(df_fig_pair2, by = c("taxon", "group"))
df_fig_pair$group = recode(df_fig_pair$group,
`lfc1` = "NCPVT - Healthy",
`lfc2` = "CirNoPVT - Healthy",
`lfc3` = "CPVT - Healthy",
`lfc4` = "CirNoPVT - NCPVT",
`lfc5` = "CPVT - NCPVT",
`lfc6` = "CPVT - CirNoPVT")
df_fig_pair$group = factor(df_fig_pair$group,
levels = c("NCPVT - Healthy",
"CirNoPVT - Healthy",
"CPVT - Healthy",
"CirNoPVT - NCPVT",
"CPVT - NCPVT",
"CPVT - CirNoPVT"
))
lo = floor(min(df_fig_pair$value))
up = ceiling(max(df_fig_pair$value))
mid = (lo + up)/2
fig_pair = df_fig_pair %>%
ggplot(aes(x = group, y = taxon, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
na.value = "white", midpoint = mid, limit = c(lo, up),
name = NULL) +
geom_text(aes(group, taxon, label = value, color = color), size = 4) +
scale_color_identity(guide = FALSE) +
labs(x = NULL, y = NULL, title = "Log fold changes as compared to healthy patients") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
fig_pair
View(physeq)
out_ancombc2 = ancombc2(
data = tse,
rank="Phylum",
fix_formula = "group",
p_adj_method = "holm",
pseudo_sens=TRUE,
prv_cut = 0, # no prev filtering necessary anymore
lib_cut = 0,
group = "group",
struc_zero = TRUE,
neg_lb = TRUE,
alpha = 0.05,
global = TRUE,
pairwise = TRUE
)
res_ancom2 <- out_ancombc2$res
tab_zero = out_ancombc2$zero_ind
tab_zero %>%
datatable(caption = "The detection of structural zeros")
# PRIMARY ANALYSIS
df_fig_group1 = res_ancom2 %>%
dplyr::filter(diff_groupNCPVT == 1 |
diff_groupCirNoPVT == 1 |
diff_groupCPVT == 1
) %>%
dplyr::mutate(lfc1 = ifelse(diff_groupNCPVT == 1,
round(lfc_groupNCPVT, 2), 0),
lfc2 = ifelse(diff_groupCirNoPVT == 1,
round(lfc_groupCirNoPVT, 2), 0),
lfc3 = ifelse(diff_groupCPVT == 1,
round(lfc_groupCPVT, 2), 0)) %>%
tidyr::pivot_longer(cols = lfc1:lfc3,
names_to = "group", values_to = "value") %>%
dplyr::arrange(taxon)
df_fig_group2 = res_ancom2 %>%
dplyr::filter(diff_groupNCPVT == 1 |
diff_groupCirNoPVT == 1 |
diff_groupCPVT == 1) %>%
dplyr::mutate(lfc1 = ifelse(passed_ss_groupNCPVT == 1 & diff_groupNCPVT == 1,
"aquamarine3", "black"),
lfc2 = ifelse(passed_ss_groupCirNoPVT == 1 & diff_groupCirNoPVT == 1,
"aquamarine3", "black"),
lfc3 = ifelse(passed_ss_groupCPVT == 1 & diff_groupCPVT == 1,
"aquamarine3", "black")
) %>%
tidyr::pivot_longer(cols = lfc1:lfc3,
names_to = "group", values_to = "color") %>%
dplyr::arrange(taxon)
df_fig_group = df_fig_group1 %>%
dplyr::left_join(df_fig_group2, by = c("taxon", "group"))
df_fig_group$group = dplyr::recode(df_fig_group$group,
`lfc1` = "NCPVT - Healthy",
`lfc2` = "CirNoPVT - Healthy",
`lfc3` = "CPVT - Healthy")
df_fig_group$group = factor(df_fig_group$group,
levels = c("NCPVT - Healthy",
"CirNoPVT - Healthy",
"CPVT - Healthy"))
lo = floor(min(df_fig_group$value))
up = ceiling(max(df_fig_group$value))
mid = (lo + up)/2
fig_group = df_fig_group %>%
ggplot(aes(x = group, y = taxon, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
na.value = "white", midpoint = mid, limit = c(lo, up),
name = NULL) +
geom_text(aes(group, taxon, label = value, color = color), size = 4) +
scale_color_identity(guide = FALSE) +
labs(x = NULL, y = NULL, title = "Log fold changes as compared to healthy patients") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
fig_group
res_global = out_ancombc2$res_global
df_group_global = res_ancom2 %>%
dplyr::select(taxon, contains("_group"))
df_fig_global = df_group_global %>%
dplyr::left_join(res_global %>%
dplyr::transmute(taxon,
diff_group = diff_abn,
passed_ss = passed_ss)) %>%
dplyr::filter(diff_group == 1) %>%
dplyr::mutate(lfc_CirNoPVT = lfc_groupCirNoPVT,
lfc_NCPVT = lfc_groupNCPVT,
lfc_CPVT = lfc_groupCPVT,
color = ifelse(passed_ss == 1, "aquamarine3", "black")) %>%
dplyr::transmute(taxon,
`CirNoPVT - Healthy` = round(lfc_groupCirNoPVT, 2),
`NCPVT - Healthy` = round(lfc_groupNCPVT, 2),
`CPVT - Healthy` = round(lfc_groupCPVT, 2),
color = color) %>%
tidyr::pivot_longer(cols = `CirNoPVT - Healthy`:`CPVT - Healthy`,
names_to = "group", values_to = "value") %>%
dplyr::arrange(taxon)
df_fig_global$group = factor(df_fig_global$group,
levels = c("NCPVT - Healthy",
"CirNoPVT - Healthy",
"CPVT - Healthy"))
lo = floor(min(df_fig_global$value))
up = ceiling(max(df_fig_global$value))
mid = (lo + up)/2
fig_global = df_fig_global %>%
ggplot(aes(x = group, y = taxon, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
na.value = "white", midpoint = mid, limit = c(lo, up),
name = NULL) +
geom_text(aes(group, taxon, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = "Log fold changes for globally significant taxa") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(color = df_fig_global %>%
dplyr::distinct(taxon, color) %>%
.$color))
fig_global
res_ancom2_pair <- out_ancombc2$res_pair
df_fig_pair1 = res_ancom2_pair %>%
dplyr::filter(diff_groupNCPVT == 1 |
diff_groupCirNoPVT == 1 |
diff_groupCPVT == 1 |
diff_groupCirNoPVT_groupNCPVT == 1 |
diff_groupCPVT_groupNCPVT == 1 |
diff_groupCPVT_groupCirNoPVT == 1) %>%
dplyr::mutate(lfc1 = ifelse(diff_groupNCPVT == 1,
round(lfc_groupNCPVT, 2), 0),
lfc2 = ifelse(diff_groupCirNoPVT == 1,
round(lfc_groupCirNoPVT, 2), 0),
lfc3 = ifelse(diff_groupCPVT == 1,
round(lfc_groupCPVT, 2), 0),
lfc4 = ifelse(diff_groupCirNoPVT_groupNCPVT == 1,
round(lfc_groupCirNoPVT_groupNCPVT, 2), 0),
lfc5 = ifelse(diff_groupCPVT_groupNCPVT == 1,
round(lfc_groupCPVT_groupNCPVT, 2), 0),
lfc6 = ifelse(diff_groupCPVT_groupCirNoPVT == 1,
round(lfc_groupCPVT_groupCirNoPVT, 2), 0)
) %>%
tidyr::pivot_longer(cols = lfc1:lfc6,
names_to = "group", values_to = "value") %>%
dplyr::arrange(taxon)
df_fig_pair2 = res_ancom2_pair %>%
dplyr::filter(diff_groupNCPVT == 1 |
diff_groupCirNoPVT == 1 |
diff_groupCPVT == 1 |
diff_groupCirNoPVT_groupNCPVT == 1 |
diff_groupCPVT_groupNCPVT == 1 |
diff_groupCPVT_groupCirNoPVT == 1) %>%
dplyr::mutate(lfc1 = ifelse(passed_ss_groupNCPVT == 1 & diff_groupNCPVT == 1,
"aquamarine3", "black"),
lfc2 = ifelse(passed_ss_groupCirNoPVT == 1 & diff_groupCirNoPVT == 1,
"aquamarine3", "black"),
lfc3 = ifelse(passed_ss_groupCPVT == 1 & diff_groupCPVT == 1,
"aquamarine3", "black"),
lfc4 = ifelse(passed_ss_groupCirNoPVT_groupNCPVT == 1 & diff_groupCirNoPVT_groupNCPVT == 1,
"aquamarine3", "black"),
lfc5 = ifelse(passed_ss_groupCPVT_groupNCPVT == 1 & diff_groupCPVT_groupNCPVT == 1,
"aquamarine3", "black"),
lfc6 = ifelse(passed_ss_groupCPVT_groupCirNoPVT == 1 & diff_groupCPVT_groupCirNoPVT == 1,
"aquamarine3", "black")) %>%
tidyr::pivot_longer(cols = lfc1:lfc6,
names_to = "group", values_to = "color") %>%
dplyr::arrange(taxon)
df_fig_pair = df_fig_pair1 %>%
dplyr::left_join(df_fig_pair2, by = c("taxon", "group"))
df_fig_pair$group = recode(df_fig_pair$group,
`lfc1` = "NCPVT - Healthy",
`lfc2` = "CirNoPVT - Healthy",
`lfc3` = "CPVT - Healthy",
`lfc4` = "CirNoPVT - NCPVT",
`lfc5` = "CPVT - NCPVT",
`lfc6` = "CPVT - CirNoPVT")
df_fig_pair$group = factor(df_fig_pair$group,
levels = c("NCPVT - Healthy",
"CirNoPVT - Healthy",
"CPVT - Healthy",
"CirNoPVT - NCPVT",
"CPVT - NCPVT",
"CPVT - CirNoPVT"
))
lo = floor(min(df_fig_pair$value))
up = ceiling(max(df_fig_pair$value))
mid = (lo + up)/2
fig_pair = df_fig_pair %>%
ggplot(aes(x = group, y = taxon, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
na.value = "white", midpoint = mid, limit = c(lo, up),
name = NULL) +
geom_text(aes(group, taxon, label = value, color = color), size = 4) +
scale_color_identity(guide = FALSE) +
labs(x = NULL, y = NULL, title = "Log fold changes as compared to healthy patients") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
fig_pair
df = read.csv("D:/Microbiome/16s_v4_ibs/dada2_153_7_run2/taxonomy_oriented-barplots270-0.9/a3c70a21-8d14-4506-9c49-f2a687fc1835/data/level-7.csv")
df
df[:-1]
df[:,-1]
df[,-1]
df[-1,]
df1 = df[-1,]
View(df1)
View(df)
df1 = df[,-1]
View(df1)
apply(df1, sum)
apply(df1, sum, 1)
lapply(df1, sum)
sapply(df1, sum)
View(df1)
write.csv("D:/Microbiome/16s_v4_ibs/ibs_species-counts.csv")
write.csv(df1,"D:/Microbiome/16s_v4_ibs/ibs_species-counts.csv")
df1 = df[,1:761]
write.csv(df1,"D:/Microbiome/16s_v4_ibs/ibs_species-counts.csv")
write.csv(df1,"D:/Microbiome/16s_v4_ibs/ibs_species-counts.csv",row.names = FALSE)
apply(df1, sum, 1)
sapply(df1, sum)
sapply(df1, sum())
colSums(df1)
df = read.csv("D:/Microbiome/16s_v4_ibs/dada2_153_7_run2/taxonomy_oriented-barplots270-0.9/a3c70a21-8d14-4506-9c49-f2a687fc1835/data/level-7.csv",
header = TRUE)
df
View(df)
df1 = df[,1:761]
df1_num = df1[:,-1]
df1_num = df1[:,-1:]
df1_num = df1[,-1:]
df1_num = df1[,-1]
View(df1_num)
colSums(df1_num)
df1_num/colSums(df1_num)
df1_num_perc = df1_num/colSums(df1_num)
View(df1_num_perc)
df1_num_perccolsums = colSums(df1_num_perc)
library(dplyr)
library(tidyr)
df1_num  %>%
mutate(percent = n/sum(n))
prop.table(df1_num)
df1_num_perc = prop.table(df1_num)
df1_num_perccolsums = colSums(df1_num_perc)
df1_num_perccolsums
prop.table
prop.table
df1_num_perc = prop.table(df1_num, 2)
df1_num_perccolsums = colSums(df1_num_perc)
View(df1_num_perc)
df1_num_perc = prop.table(df1_num, 1)
df1_num_perccolsums = colSums(df1_num_perc)
df1_num_perc = prop.table(df1_num, 1)
df1_num
m = as.matrix(df1_num_perc)
View(m)
df = read.csv("D:/Microbiome/16s_v4_ibs/dada2_153_7_run2/taxonomy_oriented-barplots270-0.9/a3c70a21-8d14-4506-9c49-f2a687fc1835/data/level-7.csv",
header = TRUE)
df1 = df[,1:761]
df1_num = df1[,-1]
m = as.matrix(df1_num)
m = as.matrix(df1_num)
df1_num_perc = prop.table(df1_num, 1)
df1_num_perc = prop.table(m, 1)
df1_num_perccolsums = colSums(df1_num_perc)
df1_num_perccolsums = rowSums(df1_num_perc)
df1_num_perc = prop.table(m, 2)
df1_num_perccolsums = rowSums(df1_num_perc)
df1_num_perccolsums = colSums(df1_num_perc)
m_perc = prop.table(m, 2)
as.dataframe(m_perc)
df1_percent = as.data.frame(m_perc)
View(df1_percent)
df1[,1]
df1_percent = cbind(df1[,1],as.data.frame(m_perc))
View(df1_percent)
colSums(df1_percent[,-1])
write.csv(df1_percent,"D:/Microbiome/16s_v4_ibs/ibs_species-percents.csv",row.names = FALSE)
m_perc = prop.table(m, 1)
df1_percent = cbind(df1[,1],as.data.frame(m_perc))
write.csv(df1_percent,"D:/Microbiome/16s_v4_ibs/ibs_species-percents.csv",row.names = FALSE)
rowSums(df1_percent)
rowSums(m_perc)
df1_percent = cbind(df1[,1],as.data.frame(m_perc))
write.csv(df1_percent,"D:/Microbiome/16s_v4_ibs/ibs_species-percents.csv",row.names = FALSE)
rowSums(m_perc)
library('ape')
library('cowplot')
library('ggplot2')
library('ggtree')
library('ggnewscale')
library('phytools')
library('treeio')
library('EBImage')
library('GiNA')
library(randomcoloR)
library(viridis)
library(paletteer)
library("seqinr")
library(stringr)
library(spaa)
library(ggExtra)
library(patchwork)
library(dplyr)
install.packages("dplyr")
library(dplyr)
counts2percents = function(feature_table, metadata, outname){
# read feature table with taxonomy
#feature_table = "D:/Microbiome/16s_v4_y/dada2_150_5_run1/table.run12.tax-filtered_visualization/data/level-7.csv"
#metadata="D:/Microbiome/16s_v4_y/samples_metadata.tsv"
#outname= "D:/Microbiome/16s_v4_y/dada2_150_5_run1/table_genus_y"
df = read.csv(feature_table,header = TRUE)
# metadata
metadata = read.csv(metadata,header = TRUE,sep="\t")
# delete column with index
df1 = df[,1:ncol(df)-1]
# change first column from "level_0" to "sample.d" (actually "sample-id")
colnames(df1) = c(colnames(metadata)[1], colnames(df1)[2:ncol(df1)])
# join taxa counts with metadata
df_joined = metadata %>%  inner_join(df1, by=colnames(metadata)[1])
df_counts = df_joined[,3:ncol(df_joined)]
# write counts
write.table(df_counts,paste0(outname,"_counts.csv"),sep=";",row.names = FALSE)
# delete column with sample-id
df1_num = df1[,-1]
m = as.matrix(df1_num)
# counts to percents
m_perc = prop.table(m, 1)
df1_percent = cbind(df[,1],as.data.frame(m_perc))
colnames(df1_percent) = c(colnames(metadata)[1], colnames(df1_percent)[2:ncol(df1_percent)])
# join taxa percents with metadata
df_joined_percent = metadata %>%  inner_join(df1_percent, by=colnames(metadata)[1])
df_percent = df_joined_percent[,3:ncol(df_joined_percent)]
print(paste0(outname,"_percents.csv"))
write.table(df_percent,paste0(outname,"_percents.csv"),sep=";",row.names = FALSE)
return(0)
}
counts2percents("D:/Microbiome/16s_v4_y/dada2_150_5_run1/table.run12.tax-filtered_visualization/data/level-2.csv",
"D:/Microbiome/16s_v4_y/samples_metadata.tsv",
"D:/Microbiome/16s_v4_y/dada2_150_5_run1/table_phylum_y"
)
counts2percents("D:/Microbiome/16s_v4_y/dada2_150_5_run1/table.run12.tax-filtered_visualization/data/level-3.csv",
"D:/Microbiome/16s_v4_y/samples_metadata.tsv",
"D:/Microbiome/16s_v4_y/dada2_150_5_run1/table_class_y"
)
counts2percents = function(feature_table, metadata, outname){
# read feature table with taxonomy
#feature_table = "D:/Microbiome/16s_v4_y/dada2_150_5_run1/table.run12.tax-filtered_visualization/data/level-7.csv"
#metadata="D:/Microbiome/16s_v4_y/samples_metadata.tsv"
#outname= "D:/Microbiome/16s_v4_y/dada2_150_5_run1/table_genus_y"
df = read.csv(feature_table,header = TRUE)
# metadata
metadata = read.csv(metadata,header = TRUE,sep="\t")
# delete column with index
df1 = df[,1:ncol(df)-1]
# change first column from "level_0" to "sample.d" (actually "sample-id")
colnames(df1) = c(colnames(metadata)[1], colnames(df1)[2:ncol(df1)])
# join taxa counts with metadata
df_joined = metadata %>%  inner_join(df1, by=colnames(metadata)[1])
df_counts = df_joined[,3:ncol(df_joined)]
# write counts
write.table(df_counts,paste0(outname,"_counts.csv"),sep=";",row.names = FALSE)
# delete column with sample-id
df1_num = df1[,-1]
m = as.matrix(df1_num)
# counts to percents
m_perc = prop.table(m, 1) * 100
df1_percent = cbind(df[,1],as.data.frame(m_perc))
colnames(df1_percent) = c(colnames(metadata)[1], colnames(df1_percent)[2:ncol(df1_percent)])
# join taxa percents with metadata
df_joined_percent = metadata %>%  inner_join(df1_percent, by=colnames(metadata)[1])
df_percent = df_joined_percent[,3:ncol(df_joined_percent)]
print(paste0(outname,"_percents.csv"))
write.table(df_percent,paste0(outname,"_percents.csv"),sep=";",row.names = FALSE)
return(0)
}
counts2percents("D:/Microbiome/16s_v4_y/dada2_150_5_run1/table.run12.tax-filtered_visualization/data/level-6.csv",
"D:/Microbiome/16s_v4_y/samples_metadata.tsv",
"D:/Microbiome/16s_v4_y/dada2_150_5_run1/table_genus_y"
)
counts2percents("D:/Microbiome/16s_v4_y/dada2_150_5_run1/table.run12.tax-filtered_visualization/data/level-5.csv",
"D:/Microbiome/16s_v4_y/samples_metadata.tsv",
"D:/Microbiome/16s_v4_y/dada2_150_5_run1/table_family_y"
)
counts2percents("D:/Microbiome/16s_v4_y/dada2_150_5_run1/table.run12.tax-filtered_visualization/data/level-2.csv",
"D:/Microbiome/16s_v4_y/samples_metadata.tsv",
"D:/Microbiome/16s_v4_y/dada2_150_5_run1/table_phylum_y"
)
counts2percents("D:/Microbiome/16s_v4_y/dada2_150_5_run1/table.run12.tax-filtered_visualization/data/level-3.csv",
"D:/Microbiome/16s_v4_y/samples_metadata.tsv",
"D:/Microbiome/16s_v4_y/dada2_150_5_run1/table_class_y"
)
library(ggtree)
library(treeio) #read.beast
library(ape) # for phylo objects
library(tidyr)
# Load functions from source code
source("get_subtrees.R")
# Load functions from source code
source("get_subtrees.R")
setwd("D:/Virology/Scripts/compare_trees_RF")
# set  working directory
#setwd("")
# Load functions from source code
source("get_subtrees.R")
# set  working directory
#setwd("")
# Load functions from source code
source("get_subtrees.R")
subtrees = get_subtrees("norovirus_vp1_norovirus_rdrp_g2_commontrees.txt")
View(subtrees)
